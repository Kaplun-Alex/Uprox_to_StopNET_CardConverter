import tkinter.font
from tkinter import *

win = tkinter.Tk()
win.title("UPROX <--> StopNet")
win.geometry('590x250+100+100')
ButtonFont = tkinter.font.Font(family='Hervetica', size=10, weight='bold')
BigFont = tkinter.font.Font(family='Hervetica', size=12, weight='bold')

td = ''


def chekinputUprox():
    up_hex_code = uproxCodeEntryHEX.get()
    up_dec_code = uproxCodeEntryDEC.get()
    if up_hex_code == '' and up_dec_code == '':
        statusEntry.delete(0, END)
        stopNetCodeEntryHEX.delete(0, END)
        stopNetCodeEntryDEC.delete(0, END)
        statusEntry.insert(0, "Введи код UPROX!")
        stopNetCodeEntryHEX.insert(0, "ERROR")
        stopNetCodeEntryDEC.insert(0, "ERROR")
    else:
        if up_hex_code != '' and up_dec_code != '':
            statusEntry.delete(0, END)
            stopNetCodeEntryHEX.delete(0, END)
            stopNetCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Дядя, введи щось одне в UPROX! ")
            stopNetCodeEntryHEX.insert(0, "ERROR")
            stopNetCodeEntryDEC.insert(0, "ERROR")
        else:
            if up_hex_code != '':
                converttostopnetHEX()
            else:
                converttostopnetDEC()


def chekinputStopnet():
    st_hex_code = stopNetCodeEntryHEX.get()
    st_dec_code = stopNetCodeEntryDEC.get()
    if st_hex_code == '' and st_dec_code == '':
        statusEntry.delete(0, END)
        uproxCodeEntryHEX.delete(0, END)
        uproxCodeEntryDEC.delete(0, END)
        statusEntry.insert(0, "Введи код StopNet!")
        uproxCodeEntryHEX.insert(0, "ERROR")
        uproxCodeEntryDEC.insert(0, "ERROR")
    else:
        if st_hex_code != '' and st_dec_code != '':
            statusEntry.delete(0, END)
            uproxCodeEntryHEX.delete(0, END)
            uproxCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Дядя, введи щось одне в StopNet! ")
            uproxCodeEntryHEX.insert(0, "ERROR")
            uproxCodeEntryDEC.insert(0, "ERROR")
        else:
            if st_hex_code != '':
                converttouproxHEX()
            else:
                converttouproxDEC()


def converttostopnetHEX():
    print('converttostopnetHEX')
    statusEntry.delete(0, END)
    stopNetCodeEntryHEX.delete(0, END)
    stopNetCodeEntryDEC.delete(0, END)
    uproxCodeEntryDEC.delete(0, END)
    try:
        data = uproxCodeEntryHEX.get()
        databin = int(data, 16)
        databin2 = bin(databin)
        print(data)
        print(databin)
        print(databin2)
        uproxCodeEntryDEC.delete(0, END)
        uproxCodeEntryDEC.insert(0, databin)
        mass = list(databin2)
        mass.pop(0)
        mass.pop(0)
        howmany = len(mass)
        if howmany >= 65:
            statusEntry.delete(0, END)
            statusEntry.insert(0, 'Ти заэбав! Менше цифр, 8 байт всього! ')
        else:
            while howmany < 64:
                mass.insert(0, '0')
                howmany = len(mass)
        print(howmany)
        print(mass)
        stmass = []
        stmass.insert(0, mass[3])
        stmass.insert(1, mass[2])
        stmass.insert(2, mass[1])
        stmass.insert(3, mass[0])
        stmass.insert(4, mass[7])
        stmass.insert(5, mass[6])
        stmass.insert(6, mass[5])
        stmass.insert(7, mass[4])
        stmass.insert(8, mass[11])
        stmass.insert(9, mass[10])
        stmass.insert(10, mass[9])
        stmass.insert(11, mass[8])
        stmass.insert(12, mass[15])
        stmass.insert(13, mass[14])
        stmass.insert(14, mass[13])
        stmass.insert(15, mass[12])
        stmass.insert(16, mass[19])
        stmass.insert(17, mass[18])
        stmass.insert(18, mass[17])
        stmass.insert(19, mass[16])
        stmass.insert(20, mass[23])
        stmass.insert(21, mass[22])
        stmass.insert(22, mass[21])
        stmass.insert(23, mass[20])
        stmass.insert(24, mass[27])
        stmass.insert(25, mass[26])
        stmass.insert(26, mass[25])
        stmass.insert(27, mass[24])
        stmass.insert(28, mass[31])
        stmass.insert(29, mass[30])
        stmass.insert(30, mass[29])
        stmass.insert(31, mass[28])
        stmass.insert(32, mass[35])
        stmass.insert(33, mass[34])
        stmass.insert(34, mass[33])
        stmass.insert(35, mass[32])
        stmass.insert(36, mass[39])
        stmass.insert(37, mass[38])
        stmass.insert(38, mass[37])
        stmass.insert(39, mass[36])
        stmass.insert(40, mass[43])
        stmass.insert(41, mass[42])
        stmass.insert(42, mass[41])
        stmass.insert(43, mass[40])
        stmass.insert(44, mass[47])
        stmass.insert(45, mass[46])
        stmass.insert(46, mass[45])
        stmass.insert(47, mass[44])
        stmass.insert(48, mass[51])
        stmass.insert(49, mass[50])
        stmass.insert(50, mass[49])
        stmass.insert(51, mass[48])
        stmass.insert(52, mass[55])
        stmass.insert(53, mass[54])
        stmass.insert(54, mass[53])
        stmass.insert(55, mass[52])
        stmass.insert(56, mass[59])
        stmass.insert(57, mass[58])
        stmass.insert(58, mass[57])
        stmass.insert(59, mass[56])
        stmass.insert(60, mass[63])
        stmass.insert(61, mass[62])
        stmass.insert(62, mass[61])
        stmass.insert(63, mass[60])
        datast_dec = str(int(''.join(stmass), 2))
        datast_hex = hex(int(''.join(stmass), 2))
        print(datast_dec)
        print(datast_hex)
        stopNetCodeEntryDEC.delete(0, END)
        stopNetCodeEntryHEX.delete(0, END)
        stopNetCodeEntryDEC.insert(0, datast_dec)
        stopNetCodeEntryHEX.insert(0, datast_hex.replace("0x", "", 1))
    except ValueError:
        err = uproxCodeEntryHEX.get()
        if err == '':
            statusEntry.delete(0, END)
            stopNetCodeEntryHEX.delete(0, END)
            stopNetCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Введи код UPROX!")
            stopNetCodeEntryHEX.insert(0, "ERROR")
            stopNetCodeEntryDEC.insert(0, "ERROR")
        else:
            statusEntry.delete(0, END)
            statusEntry.insert(0, "Ти заэбав, не вводь хуйню!")
            stopNetCodeEntryHEX.delete(0, END)
            stopNetCodeEntryDEC.delete(0, END)
            stopNetCodeEntryHEX.insert(0, "ERROR")
            stopNetCodeEntryDEC.insert(0, "ERROR")


def converttouproxHEX():
    print('converttouproxHEX')
    statusEntry.delete(0, END)
    uproxCodeEntryHEX.delete(0, END)
    uproxCodeEntryDEC.delete(0, END)
    stopNetCodeEntryDEC.delete(0, END)
    try:
        data = stopNetCodeEntryHEX.get()
        databin = int(data, 16)
        databin2 = bin(databin)
        print(data)
        print(databin)
        print(databin2)
        stopNetCodeEntryDEC.delete(0, END)
        stopNetCodeEntryDEC.insert(0, databin)
        mass = list(databin2)
        mass.pop(0)
        mass.pop(0)
        howmany = len(mass)
        if howmany >= 65:
            statusEntry.delete(0, END)
            statusEntry.insert(0, 'Ти заэбав! Менше цифр, 8 байт всього! ')
        else:
            while howmany < 64:
                mass.insert(0, '0')
                howmany = len(mass)
        print(howmany)
        print(mass)
        stmass = []
        stmass.insert(0, mass[3])
        stmass.insert(1, mass[2])
        stmass.insert(2, mass[1])
        stmass.insert(3, mass[0])
        stmass.insert(4, mass[7])
        stmass.insert(5, mass[6])
        stmass.insert(6, mass[5])
        stmass.insert(7, mass[4])
        stmass.insert(8, mass[11])
        stmass.insert(9, mass[10])
        stmass.insert(10, mass[9])
        stmass.insert(11, mass[8])
        stmass.insert(12, mass[15])
        stmass.insert(13, mass[14])
        stmass.insert(14, mass[13])
        stmass.insert(15, mass[12])
        stmass.insert(16, mass[19])
        stmass.insert(17, mass[18])
        stmass.insert(18, mass[17])
        stmass.insert(19, mass[16])
        stmass.insert(20, mass[23])
        stmass.insert(21, mass[22])
        stmass.insert(22, mass[21])
        stmass.insert(23, mass[20])
        stmass.insert(24, mass[27])
        stmass.insert(25, mass[26])
        stmass.insert(26, mass[25])
        stmass.insert(27, mass[24])
        stmass.insert(28, mass[31])
        stmass.insert(29, mass[30])
        stmass.insert(30, mass[29])
        stmass.insert(31, mass[28])
        stmass.insert(32, mass[35])
        stmass.insert(33, mass[34])
        stmass.insert(34, mass[33])
        stmass.insert(35, mass[32])
        stmass.insert(36, mass[39])
        stmass.insert(37, mass[38])
        stmass.insert(38, mass[37])
        stmass.insert(39, mass[36])
        stmass.insert(40, mass[43])
        stmass.insert(41, mass[42])
        stmass.insert(42, mass[41])
        stmass.insert(43, mass[40])
        stmass.insert(44, mass[47])
        stmass.insert(45, mass[46])
        stmass.insert(46, mass[45])
        stmass.insert(47, mass[44])
        stmass.insert(48, mass[51])
        stmass.insert(49, mass[50])
        stmass.insert(50, mass[49])
        stmass.insert(51, mass[48])
        stmass.insert(52, mass[55])
        stmass.insert(53, mass[54])
        stmass.insert(54, mass[53])
        stmass.insert(55, mass[52])
        stmass.insert(56, mass[59])
        stmass.insert(57, mass[58])
        stmass.insert(58, mass[57])
        stmass.insert(59, mass[56])
        stmass.insert(60, mass[63])
        stmass.insert(61, mass[62])
        stmass.insert(62, mass[61])
        stmass.insert(63, mass[60])
        datast_dec = str(int(''.join(stmass), 2))
        datast_hex = hex(int(''.join(stmass), 2))
        print(datast_dec)
        print(datast_hex)
        uproxCodeEntryDEC.delete(0, END)
        uproxCodeEntryHEX.delete(0, END)
        uproxCodeEntryDEC.insert(0, datast_dec)
        uproxCodeEntryHEX.insert(0, datast_hex.replace("0x", "", 1))
    except ValueError:
        err = stopNetCodeEntryHEX.get()
        if err == '':
            statusEntry.delete(0, END)
            uproxCodeEntryHEX.delete(0, END)
            uproxCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Введи код StopNet!")
            uproxCodeEntryHEX.insert(0, "ERROR")
            uproxCodeEntryDEC.insert(0, "ERROR")
        else:
            statusEntry.delete(0, END)
            statusEntry.insert(0, "Ти заэбав, не вводь хуйню!")
            uproxCodeEntryHEX.delete(0, END)
            uproxCodeEntryDEC.delete(0, END)
            uproxCodeEntryHEX.insert(0, "ERROR")
            uproxCodeEntryDEC.insert(0, "ERROR")


def converttostopnetDEC():
    print('converttostopnetDEC')
    statusEntry.delete(0, END)
    stopNetCodeEntryHEX.delete(0, END)
    stopNetCodeEntryDEC.delete(0, END)
    uproxCodeEntryHEX.delete(0, END)
    try:
        data = uproxCodeEntryDEC.get()
        datahex = hex(int(data, 10))
        databin = int(data, 10)
        databin2 = bin(databin)
        uproxCodeEntryHEX.delete(0, END)
        uproxCodeEntryHEX.insert(0, datahex.replace("0x", "", 1))
        print(data)
        print(databin)
        print(databin2)
        mass = list(databin2)
        mass.pop(0)
        mass.pop(0)
        howmany = len(mass)
        if howmany >= 65:
            statusEntry.delete(0, END)
            statusEntry.insert(0, 'Ти заэбав! Менше цифр, 8 байт всього! ')
        else:
            while howmany < 64:
                mass.insert(0, '0')
                howmany = len(mass)
        print(howmany)
        print(mass)
        stmass = []
        stmass.insert(0, mass[3])
        stmass.insert(1, mass[2])
        stmass.insert(2, mass[1])
        stmass.insert(3, mass[0])
        stmass.insert(4, mass[7])
        stmass.insert(5, mass[6])
        stmass.insert(6, mass[5])
        stmass.insert(7, mass[4])
        stmass.insert(8, mass[11])
        stmass.insert(9, mass[10])
        stmass.insert(10, mass[9])
        stmass.insert(11, mass[8])
        stmass.insert(12, mass[15])
        stmass.insert(13, mass[14])
        stmass.insert(14, mass[13])
        stmass.insert(15, mass[12])
        stmass.insert(16, mass[19])
        stmass.insert(17, mass[18])
        stmass.insert(18, mass[17])
        stmass.insert(19, mass[16])
        stmass.insert(20, mass[23])
        stmass.insert(21, mass[22])
        stmass.insert(22, mass[21])
        stmass.insert(23, mass[20])
        stmass.insert(24, mass[27])
        stmass.insert(25, mass[26])
        stmass.insert(26, mass[25])
        stmass.insert(27, mass[24])
        stmass.insert(28, mass[31])
        stmass.insert(29, mass[30])
        stmass.insert(30, mass[29])
        stmass.insert(31, mass[28])
        stmass.insert(32, mass[35])
        stmass.insert(33, mass[34])
        stmass.insert(34, mass[33])
        stmass.insert(35, mass[32])
        stmass.insert(36, mass[39])
        stmass.insert(37, mass[38])
        stmass.insert(38, mass[37])
        stmass.insert(39, mass[36])
        stmass.insert(40, mass[43])
        stmass.insert(41, mass[42])
        stmass.insert(42, mass[41])
        stmass.insert(43, mass[40])
        stmass.insert(44, mass[47])
        stmass.insert(45, mass[46])
        stmass.insert(46, mass[45])
        stmass.insert(47, mass[44])
        stmass.insert(48, mass[51])
        stmass.insert(49, mass[50])
        stmass.insert(50, mass[49])
        stmass.insert(51, mass[48])
        stmass.insert(52, mass[55])
        stmass.insert(53, mass[54])
        stmass.insert(54, mass[53])
        stmass.insert(55, mass[52])
        stmass.insert(56, mass[59])
        stmass.insert(57, mass[58])
        stmass.insert(58, mass[57])
        stmass.insert(59, mass[56])
        stmass.insert(60, mass[63])
        stmass.insert(61, mass[62])
        stmass.insert(62, mass[61])
        stmass.insert(63, mass[60])
        datast_dec = str(int(''.join(stmass), 2))
        datast_hex = hex(int(''.join(stmass), 2))
        print(datast_dec)
        print(datast_hex)
        stopNetCodeEntryDEC.delete(0, END)
        stopNetCodeEntryHEX.delete(0, END)
        stopNetCodeEntryDEC.insert(0, datast_dec)
        stopNetCodeEntryHEX.insert(0, datast_hex.replace("0x", "", 1))
    except ValueError:
        err = uproxCodeEntryDEC.get()
        if err == '':
            statusEntry.delete(0, END)
            stopNetCodeEntryHEX.delete(0, END)
            stopNetCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Введи код UPROX!")
            stopNetCodeEntryHEX.insert(0, "ERROR")
            stopNetCodeEntryDEC.insert(0, "ERROR")
        else:
            statusEntry.delete(0, END)
            statusEntry.insert(0, "Ти заэбав, не вводь хуйню!")
            stopNetCodeEntryHEX.delete(0, END)
            stopNetCodeEntryDEC.delete(0, END)
            stopNetCodeEntryHEX.insert(0, "ERROR")
            stopNetCodeEntryDEC.insert(0, "ERROR")


def converttouproxDEC():
    print('converttouproxDEC')
    statusEntry.delete(0, END)
    uproxCodeEntryHEX.delete(0, END)
    uproxCodeEntryDEC.delete(0, END)
    stopNetCodeEntryHEX.delete(0, END)
    try:
        data = stopNetCodeEntryDEC.get()
        datahex = hex(int(data, 10))
        databin = int(data, 10)
        databin2 = bin(databin)
        stopNetCodeEntryHEX.delete(0, END)
        stopNetCodeEntryHEX.insert(0, datahex.replace("0x", "", 1))
        print(data)
        print(databin)
        print(databin2)
        mass = list(databin2)
        mass.pop(0)
        mass.pop(0)
        howmany = len(mass)
        if howmany >= 65:
            statusEntry.delete(0, END)
            statusEntry.insert(0, 'Ти заэбав! Менше цифр, 8 байт всього! ')
        else:
            while howmany < 64:
                mass.insert(0, '0')
                howmany = len(mass)
        print(howmany)
        print(mass)
        stmass = []
        stmass.insert(0, mass[3])
        stmass.insert(1, mass[2])
        stmass.insert(2, mass[1])
        stmass.insert(3, mass[0])
        stmass.insert(4, mass[7])
        stmass.insert(5, mass[6])
        stmass.insert(6, mass[5])
        stmass.insert(7, mass[4])
        stmass.insert(8, mass[11])
        stmass.insert(9, mass[10])
        stmass.insert(10, mass[9])
        stmass.insert(11, mass[8])
        stmass.insert(12, mass[15])
        stmass.insert(13, mass[14])
        stmass.insert(14, mass[13])
        stmass.insert(15, mass[12])
        stmass.insert(16, mass[19])
        stmass.insert(17, mass[18])
        stmass.insert(18, mass[17])
        stmass.insert(19, mass[16])
        stmass.insert(20, mass[23])
        stmass.insert(21, mass[22])
        stmass.insert(22, mass[21])
        stmass.insert(23, mass[20])
        stmass.insert(24, mass[27])
        stmass.insert(25, mass[26])
        stmass.insert(26, mass[25])
        stmass.insert(27, mass[24])
        stmass.insert(28, mass[31])
        stmass.insert(29, mass[30])
        stmass.insert(30, mass[29])
        stmass.insert(31, mass[28])
        stmass.insert(32, mass[35])
        stmass.insert(33, mass[34])
        stmass.insert(34, mass[33])
        stmass.insert(35, mass[32])
        stmass.insert(36, mass[39])
        stmass.insert(37, mass[38])
        stmass.insert(38, mass[37])
        stmass.insert(39, mass[36])
        stmass.insert(40, mass[43])
        stmass.insert(41, mass[42])
        stmass.insert(42, mass[41])
        stmass.insert(43, mass[40])
        stmass.insert(44, mass[47])
        stmass.insert(45, mass[46])
        stmass.insert(46, mass[45])
        stmass.insert(47, mass[44])
        stmass.insert(48, mass[51])
        stmass.insert(49, mass[50])
        stmass.insert(50, mass[49])
        stmass.insert(51, mass[48])
        stmass.insert(52, mass[55])
        stmass.insert(53, mass[54])
        stmass.insert(54, mass[53])
        stmass.insert(55, mass[52])
        stmass.insert(56, mass[59])
        stmass.insert(57, mass[58])
        stmass.insert(58, mass[57])
        stmass.insert(59, mass[56])
        stmass.insert(60, mass[63])
        stmass.insert(61, mass[62])
        stmass.insert(62, mass[61])
        stmass.insert(63, mass[60])
        print(stmass)
        datast_dec = str(int(''.join(stmass), 2))
        datast_hex = hex(int(''.join(stmass), 2))
        print(datast_dec)
        print(datast_hex)
        uproxCodeEntryDEC.delete(0, END)
        uproxCodeEntryHEX.delete(0, END)
        uproxCodeEntryDEC.insert(0, datast_dec)
        uproxCodeEntryHEX.insert(0, datast_hex.replace("0x", "", 1))
    except ValueError:
        err = stopNetCodeEntryDEC.get()
        if err == '':
            statusEntry.delete(0, END)
            uproxCodeEntryHEX.delete(0, END)
            uproxCodeEntryDEC.delete(0, END)
            statusEntry.insert(0, "Введи код StopNet!")
            uproxCodeEntryHEX.insert(0, "ERROR")
            uproxCodeEntryDEC.insert(0, "ERROR")
        else:
            statusEntry.delete(0, END)
            statusEntry.insert(0, "Ти заэбав, не вводь хуйню!")
            uproxCodeEntryHEX.delete(0, END)
            uproxCodeEntryDEC.delete(0, END)
            uproxCodeEntryHEX.insert(0, "ERROR")
            uproxCodeEntryDEC.insert(0, "ERROR")


def convertuprox():
    pass


def exitprogram():
    try:
        win.destroy()
    except NameError:
        win.exit()


def uproxclear():
    uproxCodeEntryDEC.delete(0, END)
    uproxCodeEntryHEX.delete(0, END)


def stopnetclear():
    stopNetCodeEntryDEC.delete(0, END)
    stopNetCodeEntryHEX.delete(0, END)


uproxLabel = Label(win, text="Uprox card code:", font=BigFont, width=14)
uproxLabel.pack()
uproxLabel.place(x=420, y=10)

uproxCodeEntryHEX = Entry(win, font=ButtonFont, width=20)
uproxCodeEntryHEX.pack()
uproxCodeEntryHEX.place(x=420, y=40)

uproxCodeEntryDEC = Entry(win, font=ButtonFont, width=20)
uproxCodeEntryDEC.pack()
uproxCodeEntryDEC.place(x=420, y=145)

stopNetLabel = Label(win, text="StopNet card code:", font=BigFont, width=14)
stopNetLabel.pack()
stopNetLabel.place(x=20, y=10)

stopNetCodeEntryHEX = Entry(win, font=ButtonFont, width=20)
stopNetCodeEntryHEX.pack()
stopNetCodeEntryHEX.place(x=20, y=40)

stopNetCodeEntryDEC = Entry(win, font=ButtonFont, width=20)
stopNetCodeEntryDEC.pack()
stopNetCodeEntryDEC.place(x=20, y=145)

convertStopnetBut = Button(win, font=BigFont, text="< CONVERT", command=chekinputUprox)
convertStopnetBut.pack()
convertStopnetBut.place(x=180, y=85)

convertUproxBut = Button(win, font=BigFont, text="CONVERT >", command=chekinputStopnet)
convertUproxBut.pack()
convertUproxBut.place(x=300, y=85)

statusEntry = Entry(win, font=ButtonFont, text="OK", width=50)
statusEntry.pack()
statusEntry.place(x=100, y=210)

statusLabel = Label(win, text="STATUS:", font=BigFont, width=8)
statusLabel.pack()
statusLabel.place(x=0, y=208)

exitBut = Button(win, font=BigFont, text=" EXIT ", command=exitprogram)
exitBut.pack()
exitBut.place(x=500, y=200)

hex_st_Label = Label(win, text="HEX", font=BigFont, width=4)
hex_st_Label.pack()
hex_st_Label.place(x=70, y=60)

hex_uprox_Label = Label(win, text="HEX", font=BigFont, width=4)
hex_uprox_Label.pack()
hex_uprox_Label.place(x=470, y=60)

dec_st_Label = Label(win, text="DEC", font=BigFont, width=4)
dec_st_Label.pack()
dec_st_Label.place(x=70, y=120)

dec_uprox_Label = Label(win, text="DEC", font=BigFont, width=4)
dec_uprox_Label.pack()
dec_uprox_Label.place(x=470, y=120)

uproxclearBut = Button(win, font=ButtonFont, text="CLEAR", command=uproxclear)
uproxclearBut.pack()
uproxclearBut.place(x=465, y=88)

clearStopnetBut = Button(win, font=ButtonFont, text="CLEAR", command=stopnetclear)
clearStopnetBut.pack()
clearStopnetBut.place(x=65, y=88)

mainloop()
